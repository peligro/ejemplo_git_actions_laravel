name: Laravel CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      APP_KEY: ${{ secrets.APP_KEY }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_DATABASE: ${{ secrets.DB_DATABASE }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USER: ${{ secrets.EC2_USER }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/proyecto
            
            # Pull latest code
            git fetch origin main
            git reset --hard origin/main
            
            # Check if .env exists, if not create from example
            if [ ! -f .env ]; then
              echo "Creating .env file from .env.example"
              cp .env.example .env
            fi
            
            # Always ensure DB_CONNECTION is pgsql
            sed -i "s|^DB_CONNECTION=.*|DB_CONNECTION=pgsql|" .env
            
            # Replace environment variables
            sed -i "s|^DB_HOST=.*|DB_HOST=${{ secrets.DB_HOST }}|" .env
            sed -i "s|^DB_PORT=.*|DB_PORT=${{ secrets.DB_PORT }}|" .env
            sed -i "s|^DB_DATABASE=.*|DB_DATABASE=${{ secrets.DB_DATABASE }}|" .env
            sed -i "s|^DB_USERNAME=.*|DB_USERNAME=${{ secrets.DB_USERNAME }}|" .env
            sed -i "s|^DB_PASSWORD=.*|DB_PASSWORD=${{ secrets.DB_PASSWORD }}|" .env
            sed -i "s|^APP_KEY=.*|APP_KEY=${{ secrets.APP_KEY }}|" .env
            sed -i "s|^APP_DEBUG=.*|APP_DEBUG=false|" .env
            sed -i "s|^APP_ENV=.*|APP_ENV=production|" .env
            
            # Remove any commented database lines
            sed -i '/^# DB_/d' .env
            
            # Stop and clean containers
            echo "Stopping and cleaning Docker containers..."
            docker compose down
            docker system prune --all --force
            docker volume prune --force
            
            # Build and start containers
            echo "Building and starting containers..."
            docker compose up --build -d
            
            # Wait for containers to be ready
            echo "Waiting for containers to be ready..."
            sleep 30
            
            # Run composer install and migrations inside the app container
            echo "Installing Composer dependencies..."
            docker exec peligro-laravel-app composer install --no-dev --optimize-autoloader --no-interaction
            
            echo "Running migrations..."
            docker exec peligro-laravel-app php artisan migrate --force
            
            # Clear cache
            echo "Optimizing application..."
            docker exec peligro-laravel-app php artisan optimize:clear
            docker exec peligro-laravel-app php artisan optimize
            
            echo "Deployment completed successfully!"