name: Deploy Laravel to EC2

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: üõë Checkout del c√≥digo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Asegura que se traiga todo el historial

      - name: üîê Configurar SSH Key
        uses: webfactory/ssh-agent@v0.5.1
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_KEY }}

      - name: üåê Conectarse al servidor EC2 y desplegar
        env:
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          DB_DATABASE: ${{ secrets.DB_DATABASE }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          APP_KEY: ${{ secrets.APP_KEY }}
        run: |
          # Variables
          REMOTE_USER="${EC2_USER}"
          REMOTE_HOST="${EC2_HOST}"
          LARAVEL_DIR="/home/ubuntu/proyecto/laravel"
          DOCKER_DIR="/home/ubuntu/proyecto"
          CONTAINER_NAME="peligro-laravel-app"

          echo "üîó Conectando a $REMOTE_USER@$REMOTE_HOST..."

          # ‚ö†Ô∏è Usa EOF sin comillas para que las variables se expandan
          ssh -o StrictHostKeyChecking=no $REMOTE_USER@$REMOTE_HOST << EOF
            set -e  # Detener en caso de error

            # Paso 1: Ir al directorio de Laravel
            echo "üìÅ Navegando al directorio de Laravel..."
            cd "$LARAVEL_DIR" || { echo "‚ùå Error: No se encontr√≥ el directorio $LARAVEL_DIR"; exit 1; }

            # Paso 2: Actualizar c√≥digo
            echo "‚¨áÔ∏è  Actualizando c√≥digo desde GitHub..."
            git fetch origin
            git reset --hard origin/main
            git clean -fd

            # Paso 3: Manejo del .env
            echo "üîß Asegurando que .env exista..."
            if [ ! -f .env ]; then
              echo "üìù Creando .env desde .env.example"
              cp .env.example .env
            else
              echo "‚úÖ .env ya existe, actualizando valores..."
            fi

            # Paso 4: Reemplazar variables en .env
            echo "‚úèÔ∏è  Reemplazando variables en .env..."
            sed -i "s|DB_CONNECTION=.*|DB_CONNECTION=pgsql|" .env
            sed -i "s|DB_HOST=.*|DB_HOST=${DB_HOST}|" .env
            sed -i "s|DB_PORT=.*|DB_PORT=${DB_PORT}|" .env
            sed -i "s|DB_DATABASE=.*|DB_DATABASE=${DB_DATABASE}|" .env
            sed -i "s|DB_USERNAME=.*|DB_USERNAME=${DB_USERNAME}|" .env
            sed -i "s|DB_PASSWORD=.*|DB_PASSWORD=${DB_PASSWORD}|" .env
            sed -i "s|APP_KEY=.*|APP_KEY=${APP_KEY}|" .env
            sed -i "s|APP_ENV=.*|APP_ENV=production|" .env
            sed -i "s|APP_DEBUG=.*|APP_DEBUG=false|" .env
            sed -i "s|APP_URL=.*|APP_URL=http://tu-dominio.com|" .env

            # Paso 5: Permisos
            echo "üßπ Asegurando permisos en storage/ y bootstrap/cache..."
            mkdir -p storage/logs storage/framework/{cache,sessions,views} bootstrap/cache
            chmod -R 775 storage bootstrap/cache
            chown -R www-data:www-data storage bootstrap/cache 2>/dev/null || true

            # Paso 6: Ir al directorio de Docker
            echo "üê≥ Cambiando al directorio de Docker..."
            cd "$DOCKER_DIR" || { echo "‚ùå Error: No se encontr√≥ el directorio $DOCKER_DIR"; exit 1; }

            # Paso 7: Limpiar contenedores antiguos (evita conflictos de nombre)
            echo "üßπ Limpiando contenedores antiguos y hu√©rfanos..."
            docker compose down --remove-orphans || true

            # Paso 8: Reconstruir y levantar contenedores
            echo "üöÄ Construyendo y levantando contenedores..."
            docker compose up --build -d

            # Paso 9: Opcional: limpiar cach√© de build
            docker builder prune --force || true

            # Paso 10: Instalar dependencias si no existen
            echo "üì¶ Instalando dependencias PHP si no existen vendor..."
            if [ ! -d "../laravel/vendor" ]; then
              echo "üîß vendor no existe, ejecutando composer install..."
              docker exec -u www-data "$CONTAINER_NAME" composer install --optimize-autoloader --no-dev
            else
              echo "‚úÖ vendor ya existe, omitiendo composer install"
            fi

            # Paso 11: Migraciones
            echo "üîÑ Ejecutando migraciones..."
            docker exec -u www-data "$CONTAINER_NAME" php artisan migrate --force

            # Paso 12: Optimizaci√≥n
            echo "üßπ Limpiando cach√© y optimizando..."
            docker exec -u www-data "$CONTAINER_NAME" php artisan optimize:clear
            docker exec -u www-data "$CONTAINER_NAME" php artisan optimize

            # ‚úÖ √âxito
            echo "‚úÖ Despliegue completado con √©xito"
          EOF

      - name: üì¢ Notificaci√≥n de √©xito
        run: echo "üöÄ Despliegue completado correctamente"