name: Deploy to EC2

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DB_CONNECTION: pgsql
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_DATABASE: ${{ secrets.DB_DATABASE }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      APP_KEY: ${{ secrets.APP_KEY }}
      EC2_USER: ${{ secrets.EC2_USER }}
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to EC2 via SSH
        run: |
          # Conectarse al servidor EC2 usando SSH
          ssh -i <(echo "$EC2_SSH_KEY") $EC2_USER@$EC2_HOST << 'EOF'
            cd /home/ubuntu/proyecto
            # Descargar el código más reciente
            git fetch origin
            git reset --hard origin/main

            # Verificar si existe .env, si no, crearlo
            if [ ! -f ".env" ]; then
              cat > .env << 'EOT'
          APP_NAME=Laravel
          APP_ENV=production
          APP_DEBUG=false
          APP_URL=http://localhost
          APP_LOCALE=en
          APP_FALLBACK_LOCALE=en
          APP_FAKER_LOCALE=en_US
          APP_MAINTENANCE_DRIVER=file
          PHP_CLI_SERVER_WORKERS=4
          BCRYPT_ROUNDS=12
          LOG_CHANNEL=stack
          LOG_STACK=single
          LOG_DEPRECATIONS_CHANNEL=null
          LOG_LEVEL=debug
          DB_CONNECTION=pgsql
          DB_HOST=laravel-postgres
          DB_PORT=5432
          DB_DATABASE=laravel
          DB_USERNAME=laravel
          DB_PASSWORD=secret
          SESSION_DRIVER=database
          SESSION_LIFETIME=120
          SESSION_ENCRYPT=false
          SESSION_PATH=/
          SESSION_DOMAIN=null
          BROADCAST_CONNECTION=log
          FILESYSTEM_DISK=local
          QUEUE_CONNECTION=database
          CACHE_STORE=database
          MEMCACHED_HOST=127.0.0.1
          REDIS_CLIENT=phpredis
          REDIS_HOST=127.0.0.1
          REDIS_PASSWORD=null
          REDIS_PORT=6379
          MAIL_MAILER=log
          MAIL_SCHEME=null
          MAIL_HOST=127.0.0.1
          MAIL_PORT=2525
          MAIL_USERNAME=null
          MAIL_PASSWORD=null
          MAIL_FROM_ADDRESS="hello@example.com"
          MAIL_FROM_NAME="${APP_NAME}"
          AWS_ACCESS_KEY_ID=
          AWS_SECRET_ACCESS_KEY=
          AWS_DEFAULT_REGION=us-east-1
          AWS_BUCKET=
          AWS_USE_PATH_STYLE_ENDPOINT=false
          VITE_APP_NAME="${APP_NAME}"
          EOT
            fi

            # Reemplazar valores clave en .env
            sed -i "s|DB_HOST=.*|DB_HOST=${DB_HOST}|g" .env
            sed -i "s|DB_PORT=.*|DB_PORT=${DB_PORT}|g" .env
            sed -i "s|DB_DATABASE=.*|DB_DATABASE=${DB_DATABASE}|g" .env
            sed -i "s|DB_USERNAME=.*|DB_USERNAME=${DB_USERNAME}|g" .env
            sed -i "s|DB_PASSWORD=.*|DB_PASSWORD=${DB_PASSWORD}|g" .env
            sed -i "s|APP_KEY=.*|APP_KEY=${APP_KEY}|g" .env

            # Detener y limpiar contenedores
            docker-compose down
            docker system prune --all --force
            docker volume prune --all --force

            # Construir e iniciar servicios
            docker-compose up --build -d

            # Verificar si se necesita composer install
            if [ ! -d "vendor" ]; then
              docker-compose exec app composer install --no-dev --optimize-autoloader
            fi

            # Ejecutar migraciones
            docker-compose exec app php artisan migrate --force

            echo "✅ Despliegue completado"
          EOF