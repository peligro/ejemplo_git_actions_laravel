name: Laravel CI/CD

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      APP_KEY: ${{ secrets.APP_KEY }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_DATABASE: ${{ secrets.DB_DATABASE }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_USER: ${{ secrets.EC2_USER }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            cd /home/ubuntu/proyecto
            
            # Pull latest code
            echo "Pulling latest code from main branch..."
            git fetch origin main
            git reset --hard origin/main
            
            # Create fresh .env from example
            echo "Creating fresh .env from .env.example..."
            cp .env.example .env.template
            
            # Build .env file properly with newlines
            {
              # Keep original content except DB_ variables
              grep -v "^DB_" .env.template
              
              # Add proper database configuration
              echo "DB_CONNECTION=pgsql"
              echo "DB_HOST=${{ secrets.DB_HOST }}"
              echo "DB_PORT=${{ secrets.DB_PORT }}"
              echo "DB_DATABASE=${{ secrets.DB_DATABASE }}"
              echo "DB_USERNAME=${{ secrets.DB_USERNAME }}"
              echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}"
              
              # Add/update other required variables
              echo "APP_KEY=${{ secrets.APP_KEY }}"
              echo "APP_DEBUG=false"
              echo "APP_ENV=production"
              echo "APP_URL=http://${{ secrets.EC2_HOST }}"
            } | awk '!seen[$0]++' | grep -v "^$" | grep -v "^#" > .env
            
            # Clean up
            rm -f .env.template
            
            # Show the final .env content for debugging
            echo "Final .env content:"
            cat .env
            echo "---"
            
            # Set proper permissions
            echo "Setting file permissions..."
            chmod -R 755 storage bootstrap/cache
            
            # Stop and clean containers
            echo "Stopping and cleaning Docker containers..."
            docker compose down || true
            docker system prune --all --force || true
            docker volume prune --force || true
            
            # Build and start containers
            echo "Building and starting containers..."
            docker compose up --build -d
            
            # Wait for containers to be ready
            echo "Waiting for containers to be ready..."
            sleep 45
            
            # Set permissions inside container
            echo "Setting permissions inside container..."
            docker exec peligro-laravel-app chown -R www-data:www-data storage bootstrap/cache || true
            docker exec peligro-laravel-app chmod -R 775 storage bootstrap/cache || true
            
            # Run composer install inside the app container
            echo "Installing Composer dependencies..."
            docker exec peligro-laravel-app composer install --no-dev --optimize-autoloader --no-interaction --no-progress
            
            # Clear cache first
            echo "Clearing cache..."
            docker exec peligro-laravel-app php artisan config:clear || true
            docker exec peligro-laravel-app php artisan cache:clear || true
            docker exec peligro-laravel-app php artisan view:clear || true
            
            # Run migrations
            echo "Running migrations..."
            docker exec peligro-laravel-app php artisan migrate --force
            
            # Optimize application
            echo "Optimizing application..."
            docker exec peligro-laravel-app php artisan config:cache
            docker exec peligro-laravel-app php artisan route:cache
            docker exec peligro-laravel-app php artisan view:cache
            docker exec peligro-laravel-app php artisan optimize
            
            # Health check
            echo "Performing health check..."
            sleep 10
            if curl -f http://localhost; then
              echo "Health check passed! Deployment successful!"
            else
              echo "Health check failed, checking logs..."
              docker logs peligro-laravel-app
              exit 1
            fi
            
            echo "Deployment completed successfully!"