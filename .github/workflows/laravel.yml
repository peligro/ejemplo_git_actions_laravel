name: Deploy to EC2

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DB_CONNECTION: pgsql
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_DATABASE: ${{ secrets.DB_DATABASE }}
      DB_USERNAME: ${{ secrets.DB_USERNAME }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      APP_KEY: ${{ secrets.APP_KEY }}
      EC2_USER: ${{ secrets.EC2_USER }}
      EC2_HOST: ${{ secrets.EC2_HOST }}
      EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Deploy to EC2 via SSH
        run: |
          # Crear directorio temporal para la clave SSH
          mkdir -p ~/.ssh
          echo "$EC2_SSH_KEY" > ~/.ssh/ec2_key
          chmod 600 ~/.ssh/ec2_key

          # Conectarse al servidor EC2 usando SSH
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/ec2_key $EC2_USER@$EC2_HOST << 'EOF'
            set -e  # Salir si hay errores

            cd /home/ubuntu/proyecto

            # Descargar el código más reciente
            git fetch origin
            git reset --hard origin/main

            # === Asegurarse de que .env exista ===
            if [ ! -f ".env" ]; then
              echo "📁 Creando .env desde .env.example"
              cp .env.example .env
            fi

            # === Descomentar y establecer variables DB (aunque estén comentadas) ===
            sed -i "s|^#* *DB_CONNECTION=.*|DB_CONNECTION=${DB_CONNECTION}|" .env
            sed -i "s|^#* *DB_HOST=.*|DB_HOST=${DB_HOST}|" .env
            sed -i "s|^#* *DB_PORT=.*|DB_PORT=${DB_PORT}|" .env
            sed -i "s|^#* *DB_DATABASE=.*|DB_DATABASE=${DB_DATABASE}|" .env
            sed -i "s|^#* *DB_USERNAME=.*|DB_USERNAME=${DB_USERNAME}|" .env
            sed -i "s|^#* *DB_PASSWORD=.*|DB_PASSWORD=${DB_PASSWORD}|" .env

            # === Forzar APP_KEY (incluso si está vacío o comentado) ===
            if grep -q "^APP_KEY=" .env; then
              sed -i "s|^APP_KEY=.*|APP_KEY=${APP_KEY}|" .env
            else
              echo "APP_KEY=${APP_KEY}" >> .env
            fi

            # === Asegurarse de que APP_ENV y APP_DEBUG estén correctos ===
            sed -i "s|^APP_ENV=.*|APP_ENV=production|" .env
            sed -i "s|^APP_DEBUG=.*|APP_DEBUG=false|" .env

            echo "✅ .env actualizado con credenciales"

            # === Limpiar y reiniciar contenedores ===
            echo "🧹 Limpiando contenedores y volúmenes..."
            docker-compose down --remove-orphans || true
            docker system prune --all --force
            docker volume prune --all --force

            # === Construir e iniciar servicios ===
            echo "🚀 Construyendo e iniciando contenedores..."
            docker-compose up --build -d

            # === Ejecutar migraciones ===
            echo "🔄 Ejecutando migraciones..."
            docker-compose exec -T app php artisan migrate --force

            echo "✅ Despliegue completado exitosamente"
          EOF